// Generated by CoffeeScript 2.2.2
(function() {
  var AWS, AWSmock, DynamoUtil;

  AWS = require('aws-sdk');

  if (process.env.ENV === 'test') {
    AWSmock = require('aws-sdk-mock');
    AWSmock.mock('DynamoDB', 'putItem', function(params, callback) {
      cache.put('dynamoMock-' + params.Item._id.S, params);
      return callback(null, 'successfully put item in database');
    });
    AWSmock.mock('DynamoDB', 'getItem', function(params, callback) {
      return callback(null, cache.get('dynamoMock-' + params.Key._id.S));
    });
  }

  //  *****************************************************************
  DynamoUtil = class DynamoUtil {
    constructor() {
      var ref, ref1, ref2;
      this.cluster = new AWS.DynamoDB({
        accessKeyId: ((ref = config.AWS_ACCESS_KEY_ID) != null ? ref.length : void 0) ? config.AWS_ACCESS_KEY_ID : void 0,
        secretAccessKey: ((ref1 = config.AWS_SECRET_ACCESS_KEY) != null ? ref1.length : void 0) ? config.AWS_SECRET_ACCESS_KEY : void 0,
        region: ((ref2 = config.AWS_REGION) != null ? ref2.length : void 0) ? config.AWS_REGION : void 0,
        apiVersion: '2012-08-10',
        httpOptions: {
          agent: new https.Agent({
            rejectUnauthorized: true,
            keepAlive: true
          })
        }
      });
      this.flush();
    }

    flush() {
      return cache.clear();
    }

  };

  //  *****************************************************************
  DynamoUtil = class DynamoUtil {
    constructor() {
      ({
        constructor: function() {
          var ref, ref1;
          this._daxEndpoints = {};
          if ((ref = config.DAX_ENDPOINT_DATA) != null ? ref.length : void 0) {
            console.log(`DAX configured at ${config.DAX_ENDPOINT_DATA} for table data-${process.env.CHEF_ENV}`);
            this._daxEndpoints[`data-${process.env.CHEF_ENV}`] = new AmazonDaxClient({
              endpoints: [config.DAX_ENDPOINT_DATA],
              region: ((ref1 = config.AWS_REGION) != null ? ref1.length : void 0) ? config.AWS_REGION : void 0
            });
          }
          return this._cluster = new AWS.DynamoDB;
        }
      });
    }

  };

  //  *****************************************************************

}).call(this);
