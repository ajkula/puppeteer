// Generated by CoffeeScript 2.2.2
(function() {
  var AWSmock, set;

  ({
    _getEndpointFromBucket: function(bucket) {
      if (this._daxEndpoints[bucket] != null) {
        return this._daxEndpoints[bucket];
      } else {
        return this._cluster;
      }
    }
  });

  // *****************************
  if (process.env.ENV === 'test') {
    AWSmock = require('aws-sdk-mock');
    AWSmock.mock('DynamoDB', 'putItem', function(params, callback) {
      cache.put('dynamoMock-' + params.Item._id.S, params);
      return callback(null, 'successfully put item in database');
    });
    AWSmock.mock('DynamoDB', 'getItem', function(params, callback) {
      return callback(null, cache.get('dynamoMock-' + params.Key._id.S));
    });
  }

  //  ****************************
  set = function(method, params, value, opts, cb) {
    var bucket, callback, key;
    if (typeof opts === 'function') {
      cb = opts;
      opts = {};
    }
    ({bucket, key, opts, callback} = this._params(method, params, opts, cb));
    params = {
      Item: {
        '_id': {
          S: key
        },
        'value': {
          S: JSON.stringify(value)
        }
      },
      TableName: bucket
    };
    return this.cluster.putItem(params, (err, res) => {
      if (err != null) {
        this._error(method, "set", key, opts, value);
      }
      return callback(err, res);
    });
  };

  ({
    // *****************************
    _params: function(keyMethod, keyParams, options, callback) {
      return keyMethod = this._resolveMethod(keyMethod);
    }
  })

}).call(this);
